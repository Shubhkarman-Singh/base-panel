# ==============================================
# IMPULSE PANEL ENVIRONMENT CONFIGURATION
# ==============================================
#
# Copy this file to .env and configure with your values
# DO NOT commit .env to version control
#
# Quick Setup:
# 1. cp .env.example .env
# 2. Generate secrets using the commands below
# 3. Configure your database and server settings
# 4. npm start
#
# ==============================================

# ==============================================
# üîí CRITICAL SECURITY SETTINGS
# ==============================================

# Session Security (REQUIRED)
# Generate: node -e "console.log('SESSION_SECRET=' + require('crypto').randomBytes(64).toString('hex'))"
SESSION_SECRET=your_secure_64_byte_session_secret_here

# ==============================================
# üóÑÔ∏è DATABASE CONFIGURATION
# ==============================================

# Database Connection (REQUIRED)
# SQLite (recommended for development/small deployments)
DATABASE_URL=sqlite://impulse.db

# MySQL (recommended for production)
# DATABASE_URL=mysql://username:password@localhost:3306/impulse_panel

# PostgreSQL (alternative for production)
# DATABASE_URL=postgresql://username:password@localhost:5432/impulse_panel

# Database Table Name (optional)
DATABASE_TABLE=impulse

# ==============================================
# üåê SERVER CONFIGURATION
# ==============================================

# Server Port
PORT=3000

# Base URI (include protocol and domain)
BASE_URI=http://localhost:3000

# Domain Name
DOMAIN=localhost

# Environment Mode
# Options: development, production
NODE_ENV=production

# ==============================================
# üé® APPLICATION SETTINGS
# ==============================================

# Application Version
VERSION=0.0.1
VERSION_STATE=alpha

# Password Hashing Strength (10-12 recommended)
SALT_ROUNDS=10

# Open Graph Metadata
OG_TITLE=Impulse Panel
OG_DESCRIPTION=Modern control panel for managing game servers and applications

# ==============================================
# üìß EMAIL CONFIGURATION (Optional)
# ==============================================

# SMTP Server Settings
# Gmail Example:
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASSWORD=your-app-password

# Outlook/Hotmail Example:
# SMTP_HOST=smtp-mail.outlook.com
# SMTP_PORT=587
# SMTP_USER=your-email@outlook.com
# SMTP_PASSWORD=your-password

# Custom SMTP Server:
# SMTP_HOST=mail.yourdomain.com
# SMTP_PORT=587
# SMTP_USER=noreply@yourdomain.com
# SMTP_PASSWORD=your-smtp-password

# Email Security
# SMTP_SECURE=true
# SMTP_TLS_REJECT_UNAUTHORIZED=true

# ==============================================
# üîê ADVANCED SECURITY (Optional)
# ==============================================

# API Security
# Generate: node -e "console.log('API_SECRET=' + require('crypto').randomBytes(32).toString('hex'))"
# API_SECRET=your_secure_32_byte_api_secret_here

# Data Encryption Key
# Generate: node -e "console.log('ENCRYPTION_KEY=' + require('crypto').randomBytes(32).toString('hex'))"
# ENCRYPTION_KEY=your_32_byte_encryption_key_here

# JWT Secret (if using JWT tokens)
# Generate: node -e "console.log('JWT_SECRET=' + require('crypto').randomBytes(64).toString('hex'))"
# JWT_SECRET=your_jwt_secret_here

# ==============================================
# üöÄ PERFORMANCE & SCALING (Optional)
# ==============================================

# Redis Configuration (for session storage/caching)
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=your_redis_password

# Rate Limiting
# RATE_LIMIT_WINDOW_MS=900000
# RATE_LIMIT_MAX_REQUESTS=100

# Session Configuration
# SESSION_MAX_AGE=86400000
# SESSION_SECURE=true
# SESSION_SAME_SITE=strict

# ==============================================
# üîß DEVELOPMENT SETTINGS (Development Only)
# ==============================================

# Debug Mode (development only)
# DEBUG=impulse:*

# Log Level (error, warn, info, debug)
# LOG_LEVEL=info

# Hot Reload (development only)
# HOT_RELOAD=true

# ==============================================
# üåç LOCALIZATION (Optional)
# ==============================================

# Default Language
# DEFAULT_LANGUAGE=en

# Supported Languages (comma-separated)
# SUPPORTED_LANGUAGES=en,es,fr,de,it,pt,ru,zh,ja,ko

# Timezone
# TIMEZONE=UTC

# ==============================================
# üìä MONITORING & ANALYTICS (Optional)
# ==============================================

# Analytics Provider
# ANALYTICS_PROVIDER=google
# ANALYTICS_ID=GA-XXXXXXXXX

# Error Tracking
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# Health Check Endpoint
# HEALTH_CHECK_ENABLED=true
# HEALTH_CHECK_PATH=/health

# ==============================================
# üîó EXTERNAL INTEGRATIONS (Optional)
# ==============================================

# Discord Bot Integration
# DISCORD_BOT_TOKEN=your_discord_bot_token
# DISCORD_GUILD_ID=your_discord_server_id

# Webhook URLs
# WEBHOOK_URL_ALERTS=https://hooks.slack.com/services/your/webhook/url
# WEBHOOK_URL_NOTIFICATIONS=https://discord.com/api/webhooks/your/webhook

# Cloud Storage (AWS S3, etc.)
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key
# AWS_REGION=us-east-1
# AWS_S3_BUCKET=your-bucket-name

# ==============================================
# üõ°Ô∏è SECURITY BEST PRACTICES
# ==============================================
#
# 1. SECRETS GENERATION:
#    - Use cryptographically secure random generators
#    - Minimum 32 bytes for API secrets
#    - Minimum 64 bytes for session secrets
#
# 2. ENVIRONMENT SECURITY:
#    - Never commit .env to version control
#    - Use different secrets for each environment
#    - Rotate secrets regularly (quarterly recommended)
#    - Restrict file permissions: chmod 600 .env
#
# 3. PRODUCTION CHECKLIST:
#    - Set NODE_ENV=production
#    - Use HTTPS (BASE_URI should start with https://)
#    - Configure proper CORS settings
#    - Enable security headers
#    - Use strong database passwords
#    - Configure proper firewall rules
#
# 4. MONITORING:
#    - Enable error tracking (Sentry)
#    - Set up health checks
#    - Monitor resource usage
#    - Configure alerting for critical events
#
# ==============================================
# üöÄ QUICK SETUP COMMANDS
# ==============================================
#
# Generate all required secrets at once:
# node -e "
#   const crypto = require('crypto');
#   console.log('SESSION_SECRET=' + crypto.randomBytes(64).toString('hex'));
#   console.log('API_SECRET=' + crypto.randomBytes(32).toString('hex'));
#   console.log('ENCRYPTION_KEY=' + crypto.randomBytes(32).toString('hex'));
#   console.log('JWT_SECRET=' + crypto.randomBytes(64).toString('hex'));
# "
#
# Test your configuration:
# npm run test-config
#
# Run security audit:
# npm run security-audit
#
# Start the application:
# npm start
#
# ==============================================